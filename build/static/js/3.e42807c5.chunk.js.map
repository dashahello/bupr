{"version":3,"sources":["assets/audio.wav","helpers/randomNumberBetween.js","Components/InGame/Bubble.js","helpers/randomRgbString.js","Components/InGame/RemainingTime.js","Components/InGame/index.js"],"names":["randomNumberBetween","min","max","Math","random","AUDIO","Audio","audio","Bubble","onBubbleClick","bubbleClickCount","setBubbleClickCount","useState","bubbleStyle","setBubbleStyle","calculateBubbleStyle","maxChannelValue","onePercentOfAverageScreenDimension","window","innerWidth","innerHeight","smallestScreenDimension","minBubbleSize","maxBubbleSize","color","size","maxBubbleGrowth","top","left","background","width","height","play","currentCount","useEffect","onWindowResize","addEventListener","removeEventListener","id","style","onClick","RemainingTime","timerInput","Container","maxWidth","Paper","Typography","InGame","setTimerInput","setGameInProgress","setMessage","interval","setInterval","currentRemainingTime","setTimeout","DEFAULT_TIMER_INPUT","clearInterval"],"mappings":"wKAAe,MAA0B,kCCA1B,SAASA,EAAoBC,EAAKC,GAC/C,OAAOC,KAAKC,UAAYF,EAAMD,GAAOA,E,WCMjCI,EAAQ,IAAIC,MAAMC,GAET,SAASC,EAAT,OACbC,EADa,EACbA,cACAC,EAFa,EAEbA,iBACAC,EAHa,EAGbA,oBAHa,mBAIX,IAAD,EACqCC,mBAAS,MAD9C,mBACMC,EADN,KACmBC,EADnB,KAGD,SAASC,IACP,ICjBoCC,EDiB9BC,GACHC,OAAOC,WAAaD,OAAOE,aAAe,EAAI,IAC3CC,EACJH,OAAOE,YAAcF,OAAOC,WACxBD,OAAOE,YACPF,OAAOC,WAEPG,EAAqD,EAArCL,EAChBM,EAAqD,GAArCN,EAEhBO,GC3B8BR,ED2BN,IC1B1B,QAAN,OAAeb,KAAKC,SAAWY,EAA/B,aACEb,KAAKC,SAAWY,EADlB,aAEKb,KAAKC,SAAWY,EAFrB,MD2BMS,EAAOzB,EAAoBsB,EAAeC,GAEnC,EAAPE,EAAWJ,IACbI,EAAOJ,EAA0B,GAGnC,IAAMK,GA7BiB,IA6BED,EAA4BA,GAAQ,EAEvDE,EAAM3B,EACV0B,EACAR,OAAOE,YAAcK,EAAOC,GAGxBE,EAAO5B,EACX0B,EACAR,OAAOC,WAAaM,EAAOC,GAG7BZ,EAAe,CACbe,WAAW,GAAD,OAAKL,GACfM,MAAM,GAAD,OAAKL,EAAL,MACLM,OAAO,GAAD,OAAKN,EAAL,MACNE,IAAI,GAAD,OAAKA,EAAL,MACHC,KAAK,GAAD,OAAKA,EAAL,QAgBR,SAASnB,IAMPJ,EAAM2B,OAJNrB,GAAoB,SAACsB,GAAD,OAAkBA,EAAe,KAOvD,OAtBAC,oBAAUnB,EAAsB,CAACL,IAEjCwB,qBAAU,WACR,SAASC,IACPpB,IAIF,OAFAG,OAAOkB,iBAAiB,SAAUD,GAE3B,WACLjB,OAAOmB,oBAAoB,SAAUF,OAalC,qBAAKG,GAAG,SAASC,MAAO1B,EAAa2B,QAAS/B,IAnExC,I,8BEPA,SAASgC,EAAT,GAAwC,IAAfC,EAAc,EAAdA,WACtC,OACE,cAACC,EAAA,EAAD,CAAWC,SAAS,KAApB,SACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,oCAAgCJ,SCDzB,SAASK,EAAT,GAOX,IANFL,EAMC,EANDA,WACAhC,EAKC,EALDA,iBACAC,EAIC,EAJDA,oBACAqC,EAGC,EAHDA,cACAC,EAEC,EAFDA,kBACAC,EACC,EADDA,WAkBA,OAhBAhB,qBAAU,WACR,IAAMiB,EAAWC,aAAY,WAC3BJ,GAAc,SAACK,GAAD,OAA0BA,EAAuB,OAC9D,KAEHC,YAAW,WACTL,GAAkB,GAClBC,EACExC,EAAmBgC,EAAa,YAAc,qBAGhDM,EAAcO,KACdC,cAAcL,KACA,IAAbT,KACF,IAGD,qCACE,cAACD,EAAD,CAAeC,WAAYA,IAC3B,cAAClC,EAAD,CACEE,iBAAkBA,EAClBC,oBAAqBA","file":"static/js/3.e42807c5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/audio.80f01a1b.wav\";","export default function randomNumberBetween(min, max) {\n  return Math.random() * (max - min) + min;\n}\n","import audio from './../../assets/audio.wav';\nimport { useEffect, useState } from 'react';\nimport randomNumberBetween from '../../helpers/randomNumberBetween';\nimport randomRgbString from '../../helpers/randomRgbString';\n\nconst BUBBLE_HOVER_SCALE = 1.1;\n\nconst AUDIO = new Audio(audio);\n\nexport default function Bubble({\n  onBubbleClick,\n  bubbleClickCount,\n  setBubbleClickCount\n}) {\n  const [bubbleStyle, setBubbleStyle] = useState(null);\n\n  function calculateBubbleStyle() {\n    const onePercentOfAverageScreenDimension =\n      (window.innerWidth + window.innerHeight) / 2 / 100;\n    const smallestScreenDimension =\n      window.innerHeight < window.innerWidth\n        ? window.innerHeight\n        : window.innerWidth;\n\n    const minBubbleSize = onePercentOfAverageScreenDimension * 5;\n    const maxBubbleSize = onePercentOfAverageScreenDimension * 25;\n\n    const color = randomRgbString(250);\n    let size = randomNumberBetween(minBubbleSize, maxBubbleSize);\n\n    if (size * 2 > smallestScreenDimension) {\n      size = smallestScreenDimension / 2;\n    }\n\n    const maxBubbleGrowth = (size * BUBBLE_HOVER_SCALE - size) / 2;\n\n    const top = randomNumberBetween(\n      maxBubbleGrowth,\n      window.innerHeight - size - maxBubbleGrowth\n    );\n\n    const left = randomNumberBetween(\n      maxBubbleGrowth,\n      window.innerWidth - size - maxBubbleGrowth\n    );\n\n    setBubbleStyle({\n      background: `${color}`,\n      width: `${size}px`,\n      height: `${size}px`,\n      top: `${top}px`,\n      left: `${left}px`\n    });\n  }\n  useEffect(calculateBubbleStyle, [bubbleClickCount]);\n\n  useEffect(() => {\n    function onWindowResize() {\n      calculateBubbleStyle();\n    }\n    window.addEventListener('resize', onWindowResize);\n\n    return () => {\n      window.removeEventListener('resize', onWindowResize);\n    };\n  });\n\n  function onBubbleClick() {\n    playAudio();\n    setBubbleClickCount((currentCount) => currentCount + 1);\n  }\n\n  function playAudio() {\n    AUDIO.play();\n  }\n\n  return <div id=\"bubble\" style={bubbleStyle} onClick={onBubbleClick}></div>;\n}\n","export default function randomRgbString(maxChannelValue) {\n  return `rgb( ${Math.random() * maxChannelValue}, ${\n    Math.random() * maxChannelValue\n  }, ${Math.random() * maxChannelValue})`;\n}\n","import { Container, Paper, Typography } from '@material-ui/core';\n\nexport default function RemainingTime({ timerInput }) {\n  return (\n    <Container maxWidth=\"xs\">\n      <Paper>\n        <Typography>{`REMAINING TIME: ${timerInput}`}</Typography>\n      </Paper>\n    </Container>\n  );\n}\n","import { useEffect } from 'react';\nimport DEFAULT_TIMER_INPUT from '../../DEFAULT_TIMER_INPUT';\nimport Bubble from './Bubble';\nimport RemainingTime from './RemainingTime';\n\nexport default function InGame({\n  timerInput,\n  bubbleClickCount,\n  setBubbleClickCount,\n  setTimerInput,\n  setGameInProgress,\n  setMessage\n}) {\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setTimerInput((currentRemainingTime) => currentRemainingTime - 1);\n    }, 1000);\n\n    setTimeout(() => {\n      setGameInProgress(false);\n      setMessage(\n        bubbleClickCount > timerInput ? 'GOOD JOB!' : 'YOU CAN DO BETTER'\n      );\n\n      setTimerInput(DEFAULT_TIMER_INPUT);\n      clearInterval(interval);\n    }, timerInput * 1000);\n  }, []);\n\n  return (\n    <>\n      <RemainingTime timerInput={timerInput} />\n      <Bubble\n        bubbleClickCount={bubbleClickCount}\n        setBubbleClickCount={setBubbleClickCount}\n      />\n    </>\n  );\n}\n"],"sourceRoot":""}