{"version":3,"sources":["Components/InGame/Bubble.js","assets/audio.mp3","Components/InGame/RemainingTime.js","Components/InGame/index.js"],"names":["BUBBLE_TIMEOUT","AUDIO","Audio","audio","BUBBLE_ID","Bubble","bubbleClickCount","setBubbleClickCount","miscklicksEnabled","useState","bubbleStyle","setBubbleStyle","calculateBubbleStyle","onePercentOfAverageScreenDimension","window","innerWidth","innerHeight","smallestScreenDimension","minBubbleSize","maxBubbleSize","color","randomRgbString","size","randomNumberBetween","maxBubbleGrowth","top","left","background","width","height","clearTimeout","setTimeout","useEffect","onWindowResize","onWindowClick","evt","target","id","addEventListener","removeEventListener","style","onClick","play","currentCount","RemainingTime","timerInput","Container","maxWidth","Paper","Typography","InGame","setTimerInput","setGameInProgress","setMessage","score","interval","setInterval","currentRemainingTime","DEFAULT_TIMER_INPUT","clearInterval"],"mappings":"iJAWIA,E,uBCXW,MAA0B,kC,uBDQnCC,EAAQ,IAAIC,MAAMC,GAElBC,EAAY,SAGH,SAASC,EAAT,GAIX,IAHFC,EAGC,EAHDA,iBACAC,EAEC,EAFDA,oBACAC,EACC,EADDA,kBACC,EACqCC,mBAAS,MAD9C,mBACMC,EADN,KACmBC,EADnB,KAGD,SAASC,IACP,IAAMC,GACHC,OAAOC,WAAaD,OAAOE,aAAe,EAAI,IAC3CC,EACJH,OAAOE,YAAcF,OAAOC,WACxBD,OAAOE,YACPF,OAAOC,WAEPG,EAAqD,EAArCL,EAChBM,EAAqD,GAArCN,EAEhBO,EAAQC,YAAgB,KAC1BC,EAAOC,YAAoBL,EAAeC,GAEnC,EAAPG,EAAWL,IACbK,EAAOL,EAA0B,GAGnC,IAAMO,GAjCiB,IAiCEF,EAA4BA,GAAQ,EAEvDG,EAAMF,YACVC,EACAV,OAAOE,YAAcM,EAAOE,GAGxBE,EAAOH,YACXC,EACAV,OAAOC,WAAaO,EAAOE,GAG7Bb,EAAe,CACbgB,WAAW,GAAD,OAAKP,GACfQ,MAAM,GAAD,OAAKN,EAAL,MACLO,OAAO,GAAD,OAAKP,EAAL,MACNG,IAAI,GAAD,OAAKA,EAAL,MACHC,KAAK,GAAD,OAAKA,EAAL,QAGNI,aAAa9B,GACbA,EAAiB+B,WAAWnB,EAAsB,KAwCpD,OAtCAoB,oBAAUpB,EAAsB,CAACN,IAEjC0B,qBAAU,WACR,SAASC,IACPrB,IAIF,SAASsB,EAAcC,GACjBA,EAAIC,OAAOC,KAAOjC,GACpBQ,IAQJ,OAZAE,OAAOwB,iBAAiB,SAAUL,GAQ9BzB,GACFM,OAAOwB,iBAAiB,QAASJ,GAG5B,WACLpB,OAAOyB,oBAAoB,SAAUN,GAEjCzB,GACFM,OAAOyB,oBAAoB,QAASL,GAGlClC,GAAgB8B,aAAa9B,MAElC,IAWI,qBAAKqC,GAAIjC,EAAWoC,MAAO9B,EAAa+B,QAT/C,WAMExC,EAAMyC,OAJNnC,GAAoB,SAACoC,GAAD,OAAkBA,EAAe,Q,8BE1F1C,SAASC,EAAT,GAAwC,IAAfC,EAAc,EAAdA,WACtC,OACE,cAACC,EAAA,EAAD,CAAWC,SAAS,KAApB,SACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,oCAAgCJ,SCDzB,SAASK,EAAT,GASX,IARFL,EAQC,EARDA,WACAvC,EAOC,EAPDA,iBACAC,EAMC,EANDA,oBACA4C,EAKC,EALDA,cACAC,EAIC,EAJDA,kBAEA5C,GAEC,EAHD6C,WAGC,EAFD7C,mBACA8C,EACC,EADDA,MAkBA,OAhBAtB,qBAAU,WACR,IAAMuB,EAAWC,aAAY,WAC3BL,GAAc,SAACM,GAAD,OAA0BA,EAAuB,OAC9D,KAEH1B,YAAW,WAGTqB,GAAkB,GAGlBD,EAAcO,KACdC,cAAcJ,KACA,IAAbV,KACF,IAGD,qCACE,cAACD,EAAD,CAAeC,WAAYA,IAC3B,cAACxC,EAAD,CACEC,iBAAkBA,EAClBC,oBAAqBA,EACrBC,kBAAmBA,EACnB8C,MAAOA","file":"static/js/3.f8b9747d.chunk.js","sourcesContent":["import audio from './../../assets/audio.mp3';\nimport { useEffect, useState } from 'react';\nimport randomNumberBetween from '../../helpers/randomNumberBetween';\nimport randomRgbString from '../../helpers/randomRgbString';\n\nconst BUBBLE_HOVER_SCALE = 1.1;\n\n// const AUDIO = document.getElementById('bubble_pop_sound');\nconst AUDIO = new Audio(audio);\n\nconst BUBBLE_ID = 'bubble';\nlet BUBBLE_TIMEOUT;\n\nexport default function Bubble({\n  bubbleClickCount,\n  setBubbleClickCount,\n  miscklicksEnabled\n}) {\n  const [bubbleStyle, setBubbleStyle] = useState(null);\n\n  function calculateBubbleStyle() {\n    const onePercentOfAverageScreenDimension =\n      (window.innerWidth + window.innerHeight) / 2 / 100;\n    const smallestScreenDimension =\n      window.innerHeight < window.innerWidth\n        ? window.innerHeight\n        : window.innerWidth;\n\n    const minBubbleSize = onePercentOfAverageScreenDimension * 5;\n    const maxBubbleSize = onePercentOfAverageScreenDimension * 25;\n\n    const color = randomRgbString(250);\n    let size = randomNumberBetween(minBubbleSize, maxBubbleSize);\n\n    if (size * 2 > smallestScreenDimension) {\n      size = smallestScreenDimension / 2;\n    }\n\n    const maxBubbleGrowth = (size * BUBBLE_HOVER_SCALE - size) / 2;\n\n    const top = randomNumberBetween(\n      maxBubbleGrowth,\n      window.innerHeight - size - maxBubbleGrowth\n    );\n\n    const left = randomNumberBetween(\n      maxBubbleGrowth,\n      window.innerWidth - size - maxBubbleGrowth\n    );\n\n    setBubbleStyle({\n      background: `${color}`,\n      width: `${size}px`,\n      height: `${size}px`,\n      top: `${top}px`,\n      left: `${left}px`\n    });\n\n    clearTimeout(BUBBLE_TIMEOUT);\n    BUBBLE_TIMEOUT = setTimeout(calculateBubbleStyle, 1000);\n  }\n  useEffect(calculateBubbleStyle, [bubbleClickCount]); // eslint-disable-line\n\n  useEffect(() => {\n    function onWindowResize() {\n      calculateBubbleStyle();\n    }\n    window.addEventListener('resize', onWindowResize);\n\n    function onWindowClick(evt) {\n      if (evt.target.id !== BUBBLE_ID) {\n        calculateBubbleStyle();\n      }\n    }\n\n    if (miscklicksEnabled) {\n      window.addEventListener('click', onWindowClick);\n    }\n\n    return () => {\n      window.removeEventListener('resize', onWindowResize);\n\n      if (miscklicksEnabled) {\n        window.removeEventListener('click', onWindowClick);\n      }\n\n      if (BUBBLE_TIMEOUT) clearTimeout(BUBBLE_TIMEOUT);\n    };\n  }, []); // eslint-disable-line\n\n  function onBubbleClick() {\n    playAudio();\n    setBubbleClickCount((currentCount) => currentCount + 1);\n  }\n\n  function playAudio() {\n    AUDIO.play();\n  }\n\n  return <div id={BUBBLE_ID} style={bubbleStyle} onClick={onBubbleClick}></div>;\n}\n","export default __webpack_public_path__ + \"static/media/audio.80f01a1b.mp3\";","import { Container, Paper, Typography } from '@material-ui/core';\n\nexport default function RemainingTime({ timerInput }) {\n  return (\n    <Container maxWidth=\"xs\">\n      <Paper>\n        <Typography>{`REMAINING TIME: ${timerInput}`}</Typography>\n      </Paper>\n    </Container>\n  );\n}\n","import { useEffect } from 'react';\nimport DEFAULT_TIMER_INPUT from '../../DEFAULT_TIMER_INPUT';\nimport Bubble from './Bubble';\nimport RemainingTime from './RemainingTime';\n\nexport default function InGame({\n  timerInput,\n  bubbleClickCount,\n  setBubbleClickCount,\n  setTimerInput,\n  setGameInProgress,\n  setMessage,\n  miscklicksEnabled,\n  score\n}) {\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setTimerInput((currentRemainingTime) => currentRemainingTime - 1);\n    }, 1000);\n\n    setTimeout(() => {\n      // console.log('timer input', timerInput);\n      // console.log('score', score);\n      setGameInProgress(false);\n      // setMessage(score > timerInput ? 'GOOD JOB!' : 'YOU CAN DO BETTER');\n\n      setTimerInput(DEFAULT_TIMER_INPUT);\n      clearInterval(interval);\n    }, timerInput * 1000);\n  }, []); // eslint-disable-line\n\n  return (\n    <>\n      <RemainingTime timerInput={timerInput} />\n      <Bubble\n        bubbleClickCount={bubbleClickCount}\n        setBubbleClickCount={setBubbleClickCount}\n        miscklicksEnabled={miscklicksEnabled}\n        score={score}\n      />\n    </>\n  );\n}\n"],"sourceRoot":""}