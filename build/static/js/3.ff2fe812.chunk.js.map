{"version":3,"sources":["Components/InGame/Bubble.js","assets/audio.mp3","Components/InGame/RemainingTime.js","Components/InGame/index.js"],"names":["BUBBLE_TIMEOUT","AUDIO","Audio","audio","BUBBLE_ID","Bubble","color","size","top","left","bubbleClickCount","setBubbleClickCount","miscklicksEnabled","bubbleLifetime","useState","bubbleStyle","setBubbleStyle","changeBubbleStyle","onePercentOfAverageScreenDimension","window","innerWidth","innerHeight","smallestScreenDimension","minBubbleSize","maxBubbleSize","randomRgbString","randomNumberBetween","maxBubbleGrowth","calculateBubbleStyle","background","width","height","clearTimeout","setTimeout","useEffect","onWindowResize","onWindowClick","evt","target","id","addEventListener","removeEventListener","style","onClick","play","currentCount","RemainingTime","timerInput","Container","maxWidth","Paper","Typography","InGame","setTimerInput","setGameInProgress","setMessage","score","interval","setInterval","currentRemainingTime","DEFAULT_TIMER_INPUT","clearInterval"],"mappings":"iJAUIA,E,uBCVW,MAA0B,kC,uBDOnCC,EAAQ,IAAIC,MAAMC,GAElBC,EAAY,SAGH,SAASC,EAAT,GAKX,IAGEC,EACAC,EACAC,EACAC,EAVJC,EAIC,EAJDA,iBACAC,EAGC,EAHDA,oBACAC,EAEC,EAFDA,kBACAC,EACC,EADDA,eACC,EACqCC,mBAAS,MAD9C,mBACMC,EADN,KACmBC,EADnB,KAuCD,SAASC,KA/BT,WACE,IAAMC,GACHC,OAAOC,WAAaD,OAAOE,aAAe,EAAI,IAC3CC,EACJH,OAAOE,YAAcF,OAAOC,WACxBD,OAAOE,YACPF,OAAOC,WAEPG,EAAqD,EAArCL,EAChBM,EAAqD,GAArCN,EAEtBZ,EAAQmB,YAAgB,KAGb,GAFXlB,EAAOmB,YAAoBH,EAAeC,IAE3BF,IACbf,EAAOe,EAA0B,GAGnC,IAAMK,GAtCiB,IAsCEpB,EAA4BA,GAAQ,EAE7DC,EAAMkB,YACJC,EACAR,OAAOE,YAAcd,EAAOoB,GAG9BlB,EAAOiB,YACLC,EACAR,OAAOC,WAAab,EAAOoB,GAK7BC,GACAZ,EAAe,CACba,WAAW,iHAAD,OAINvB,EAJM,cAMVwB,MAAM,GAAD,OAAKvB,EAAL,MACLwB,OAAO,GAAD,OAAKxB,EAAL,MACNC,IAAI,GAAD,OAAKA,EAAL,MACHC,KAAK,GAAD,OAAKA,EAAL,QAGFI,IACFmB,aAAahC,GACbA,EAAiBiC,WAAWhB,EAAmB,MA0CnD,OAtCAiB,oBAAUjB,EAAmB,CAACP,IAE9BwB,qBAAU,WACR,SAASC,IACPlB,IAIF,SAASmB,EAAcC,GACjBA,EAAIC,OAAOC,KAAOnC,GACpBa,IAQJ,OAZAE,OAAOqB,iBAAiB,SAAUL,GAQ9BvB,GACFO,OAAOqB,iBAAiB,QAASJ,GAG5B,WACLjB,OAAOsB,oBAAoB,SAAUN,GAEjCvB,GACFO,OAAOsB,oBAAoB,QAASL,GAGlCpC,GAAgBgC,aAAahC,MAElC,IAWI,qBAAKuC,GAAInC,EAAWsC,MAAO3B,EAAa4B,QAT/C,WAME1C,EAAM2C,OAJNjC,GAAoB,SAACkC,GAAD,OAAkBA,EAAe,Q,8BE1G1C,SAASC,EAAT,GAAwC,IAAfC,EAAc,EAAdA,WACtC,OACE,cAACC,EAAA,EAAD,CAAWC,SAAS,KAApB,SACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,oCAAgCJ,SCDzB,SAASK,EAAT,GAUX,IATFL,EASC,EATDA,WACArC,EAQC,EARDA,iBACAC,EAOC,EAPDA,oBACA0C,EAMC,EANDA,cACAC,EAKC,EALDA,kBAEA1C,GAGC,EAJD2C,WAIC,EAHD3C,mBACA4C,EAEC,EAFDA,MACA3C,EACC,EADDA,eAeA,OAbAqB,qBAAU,WACR,IAAMuB,EAAWC,aAAY,WAC3BL,GAAc,SAACM,GAAD,OAA0BA,EAAuB,OAC9D,KAEH1B,YAAW,WACTqB,GAAkB,GAElBD,EAAcO,KACdC,cAAcJ,KACA,IAAbV,KACF,IAGD,qCACE,cAACD,EAAD,CAAeC,WAAYA,IAC3B,cAAC1C,EAAD,CACEK,iBAAkBA,EAClBC,oBAAqBA,EACrBC,kBAAmBA,EACnB4C,MAAOA,EACP3C,eAAgBA","file":"static/js/3.ff2fe812.chunk.js","sourcesContent":["import audio from './../../assets/audio.mp3';\nimport { useEffect, useState } from 'react';\nimport randomNumberBetween from '../../helpers/randomNumberBetween';\nimport randomRgbString from '../../helpers/randomRgbString';\n\nconst BUBBLE_HOVER_SCALE = 1.1;\n\nconst AUDIO = new Audio(audio);\n\nconst BUBBLE_ID = 'bubble';\nlet BUBBLE_TIMEOUT;\n\nexport default function Bubble({\n  bubbleClickCount,\n  setBubbleClickCount,\n  miscklicksEnabled,\n  bubbleLifetime\n}) {\n  const [bubbleStyle, setBubbleStyle] = useState(null);\n\n  let color;\n  let size;\n  let top;\n  let left;\n\n  function calculateBubbleStyle() {\n    const onePercentOfAverageScreenDimension =\n      (window.innerWidth + window.innerHeight) / 2 / 100;\n    const smallestScreenDimension =\n      window.innerHeight < window.innerWidth\n        ? window.innerHeight\n        : window.innerWidth;\n\n    const minBubbleSize = onePercentOfAverageScreenDimension * 5;\n    const maxBubbleSize = onePercentOfAverageScreenDimension * 25;\n\n    color = randomRgbString(250);\n    size = randomNumberBetween(minBubbleSize, maxBubbleSize);\n\n    if (size * 2 > smallestScreenDimension) {\n      size = smallestScreenDimension / 2;\n    }\n\n    const maxBubbleGrowth = (size * BUBBLE_HOVER_SCALE - size) / 2;\n\n    top = randomNumberBetween(\n      maxBubbleGrowth,\n      window.innerHeight - size - maxBubbleGrowth\n    );\n\n    left = randomNumberBetween(\n      maxBubbleGrowth,\n      window.innerWidth - size - maxBubbleGrowth\n    );\n  }\n\n  function changeBubbleStyle() {\n    calculateBubbleStyle();\n    setBubbleStyle({\n      background: `linear-gradient(\n        to bottom, \n        rgba(254,255,255) 0%,\n        rgba(221,241,249) 35%,\n        ${color} \n      )`,\n      width: `${size}px`,\n      height: `${size}px`,\n      top: `${top}px`,\n      left: `${left}px`\n    });\n\n    if (bubbleLifetime) {\n      clearTimeout(BUBBLE_TIMEOUT);\n      BUBBLE_TIMEOUT = setTimeout(changeBubbleStyle, 1000);\n    }\n  }\n\n  useEffect(changeBubbleStyle, [bubbleClickCount]); // eslint-disable-line\n\n  useEffect(() => {\n    function onWindowResize() {\n      changeBubbleStyle();\n    }\n    window.addEventListener('resize', onWindowResize);\n\n    function onWindowClick(evt) {\n      if (evt.target.id !== BUBBLE_ID) {\n        changeBubbleStyle();\n      }\n    }\n\n    if (miscklicksEnabled) {\n      window.addEventListener('click', onWindowClick);\n    }\n\n    return () => {\n      window.removeEventListener('resize', onWindowResize);\n\n      if (miscklicksEnabled) {\n        window.removeEventListener('click', onWindowClick);\n      }\n\n      if (BUBBLE_TIMEOUT) clearTimeout(BUBBLE_TIMEOUT);\n    };\n  }, []); // eslint-disable-line\n\n  function onBubbleClick() {\n    playAudio();\n    setBubbleClickCount((currentCount) => currentCount + 1);\n  }\n\n  function playAudio() {\n    AUDIO.play();\n  }\n\n  return <div id={BUBBLE_ID} style={bubbleStyle} onClick={onBubbleClick}></div>;\n}\n","export default __webpack_public_path__ + \"static/media/audio.80f01a1b.mp3\";","import { Container, Paper, Typography } from '@material-ui/core';\n\nexport default function RemainingTime({ timerInput }) {\n  return (\n    <Container maxWidth=\"xs\">\n      <Paper>\n        <Typography>{`REMAINING TIME: ${timerInput}`}</Typography>\n      </Paper>\n    </Container>\n  );\n}\n","import { useEffect } from 'react';\nimport DEFAULT_TIMER_INPUT from '../../DEFAULT_TIMER_INPUT';\nimport Bubble from './Bubble';\nimport RemainingTime from './RemainingTime';\n\nexport default function InGame({\n  timerInput,\n  bubbleClickCount,\n  setBubbleClickCount,\n  setTimerInput,\n  setGameInProgress,\n  setMessage,\n  miscklicksEnabled,\n  score,\n  bubbleLifetime\n}) {\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setTimerInput((currentRemainingTime) => currentRemainingTime - 1);\n    }, 1000);\n\n    setTimeout(() => {\n      setGameInProgress(false);\n\n      setTimerInput(DEFAULT_TIMER_INPUT);\n      clearInterval(interval);\n    }, timerInput * 1000);\n  }, []); // eslint-disable-line\n\n  return (\n    <>\n      <RemainingTime timerInput={timerInput} />\n      <Bubble\n        bubbleClickCount={bubbleClickCount}\n        setBubbleClickCount={setBubbleClickCount}\n        miscklicksEnabled={miscklicksEnabled}\n        score={score}\n        bubbleLifetime={bubbleLifetime}\n      />\n    </>\n  );\n}\n"],"sourceRoot":""}